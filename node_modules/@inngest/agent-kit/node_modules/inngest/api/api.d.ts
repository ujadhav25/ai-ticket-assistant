import { type fetch } from "cross-fetch";
import { type ExecutionVersion } from "../components/execution/InngestExecution.js";
import { type Mode } from "../helpers/env.js";
import { type Result } from "../types.js";
import { type BatchResponse, type ErrorResponse, type StepsResponse } from "./schema.js";
type FetchT = typeof fetch;
export declare namespace InngestApi {
    interface Options {
        baseUrl?: string;
        signingKey: string;
        signingKeyFallback: string | undefined;
        fetch: FetchT;
        mode: Mode;
    }
}
export declare class InngestApi {
    apiBaseUrl?: string;
    private signingKey;
    private signingKeyFallback;
    private readonly fetch;
    private mode;
    constructor({ baseUrl, signingKey, signingKeyFallback, fetch, mode, }: InngestApi.Options);
    private get hashedKey();
    private get hashedFallbackKey();
    setSigningKey(key: string | undefined): void;
    setSigningKeyFallback(key: string | undefined): void;
    private getTargetUrl;
    getRunSteps(runId: string, version: ExecutionVersion): Promise<Result<StepsResponse, ErrorResponse>>;
    getRunBatch(runId: string): Promise<Result<BatchResponse, ErrorResponse>>;
}
export {};
//# sourceMappingURL=api.d.ts.map